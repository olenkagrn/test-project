/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./script.js":
/*!*******************!*\
  !*** ./script.js ***!
  \*******************/
/***/ (() => {

eval("\r\n\r\nclass Workout {\r\n  date = new Date();\r\n  id = (Date.now() + '').slice(-10);\r\n  clicks = 0;\r\n\r\n  constructor(coords, distance, duration) {\r\n    // this.date = ...\r\n    // this.id = ...\r\n    this.coords = coords; // [lat, lng]\r\n    this.distance = distance; // in km\r\n    this.duration = duration; // in min\r\n  }\r\n\r\n  _setDescription() {\r\n    // prettier-ignore\r\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n\r\n    this.description = `${this.type[0].toUpperCase()}${this.type.slice(1)} on ${\r\n      months[this.date.getMonth()]\r\n    } ${this.date.getDate()}`;\r\n  }\r\n\r\n  click() {\r\n    this.clicks++;\r\n  }\r\n}\r\n\r\nclass Running extends Workout {\r\n  type = 'running';\r\n\r\n  constructor(coords, distance, duration, cadence) {\r\n    super(coords, distance, duration);\r\n    this.cadence = cadence;\r\n    this.calcPace();\r\n    this._setDescription();\r\n  }\r\n\r\n  calcPace() {\r\n    // min/km\r\n    this.pace = this.duration / this.distance;\r\n    return this.pace;\r\n  }\r\n}\r\n\r\nclass Cycling extends Workout {\r\n  type = 'cycling';\r\n\r\n  constructor(coords, distance, duration, elevationGain) {\r\n    super(coords, distance, duration);\r\n    this.elevationGain = elevationGain;\r\n    // this.type = 'cycling';\r\n    this.calcSpeed();\r\n    this._setDescription();\r\n  }\r\n\r\n  calcSpeed() {\r\n    // km/h\r\n    this.speed = this.distance / (this.duration / 60);\r\n    return this.speed;\r\n  }\r\n}\r\n\r\n// const run1 = new Running([39, -12], 5.2, 24, 178);\r\n// const cycling1 = new Cycling([39, -12], 27, 95, 523);\r\n// console.log(run1, cycling1);\r\n\r\n///////////////////////////////////////\r\n// APPLICATION ARCHITECTURE\r\nconst form = document.querySelector('.form');\r\nconst containerWorkouts = document.querySelector('.workouts');\r\nconst inputType = document.querySelector('.form__input--type');\r\nconst inputDistance = document.querySelector('.form__input--distance');\r\nconst inputDuration = document.querySelector('.form__input--duration');\r\nconst inputCadence = document.querySelector('.form__input--cadence');\r\nconst inputElevation = document.querySelector('.form__input--elevation');\r\n\r\nclass App {\r\n  #map;\r\n  #mapZoomLevel = 13;\r\n  #mapEvent;\r\n  #workouts = [];\r\n\r\n  constructor() {\r\n    // Get user's position\r\n    this._getPosition();\r\n\r\n    // Get data from local storage\r\n    this._getLocalStorage();\r\n\r\n    // Attach event handlers\r\n    form.addEventListener('submit', this._newWorkout.bind(this));\r\n    inputType.addEventListener('change', this._toggleElevationField);\r\n    containerWorkouts.addEventListener('click', this._moveToPopup.bind(this));\r\n  }\r\n\r\n  _getPosition() {\r\n    if (navigator.geolocation)\r\n      navigator.geolocation.getCurrentPosition(\r\n        this._loadMap.bind(this),\r\n        function () {\r\n          alert('Could not get your position');\r\n        }\r\n      );\r\n  }\r\n\r\n  _loadMap(position) {\r\n    const { latitude } = position.coords;\r\n    const { longitude } = position.coords;\r\n    // console.log(`https://www.google.pt/maps/@${latitude},${longitude}`);\r\n\r\n    const coords = [latitude, longitude];\r\n\r\n    this.#map = L.map('map').setView(coords, this.#mapZoomLevel);\r\n\r\n    L.tileLayer('https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png', {\r\n      attribution:\r\n        '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\r\n    }).addTo(this.#map);\r\n\r\n    // Handling clicks on map\r\n    this.#map.on('click', this._showForm.bind(this));\r\n\r\n    this.#workouts.forEach(work => {\r\n      this._renderWorkoutMarker(work);\r\n    });\r\n  }\r\n\r\n  _showForm(mapE) {\r\n    this.#mapEvent = mapE;\r\n    form.classList.remove('hidden');\r\n    inputDistance.focus();\r\n  }\r\n\r\n  _hideForm() {\r\n    // Empty inputs\r\n    inputDistance.value =\r\n      inputDuration.value =\r\n      inputCadence.value =\r\n      inputElevation.value =\r\n        '';\r\n\r\n    form.style.display = 'none';\r\n    form.classList.add('hidden');\r\n    setTimeout(() => (form.style.display = 'grid'), 1000);\r\n  }\r\n\r\n  _toggleElevationField() {\r\n    inputElevation.closest('.form__row').classList.toggle('form__row--hidden');\r\n    inputCadence.closest('.form__row').classList.toggle('form__row--hidden');\r\n  }\r\n\r\n  _newWorkout(e) {\r\n    const validInputs = (...inputs) =>\r\n      inputs.every(inp => Number.isFinite(inp));\r\n    const allPositive = (...inputs) => inputs.every(inp => inp > 0);\r\n\r\n    e.preventDefault();\r\n\r\n    // Get data from form\r\n    const type = inputType.value;\r\n    const distance = +inputDistance.value;\r\n    const duration = +inputDuration.value;\r\n    const { lat, lng } = this.#mapEvent.latlng;\r\n    let workout;\r\n\r\n    // If workout running, create running object\r\n    if (type === 'running') {\r\n      const cadence = +inputCadence.value;\r\n\r\n      // Check if data is valid\r\n      if (\r\n        // !Number.isFinite(distance) ||\r\n        // !Number.isFinite(duration) ||\r\n        // !Number.isFinite(cadence)\r\n        !validInputs(distance, duration, cadence) ||\r\n        !allPositive(distance, duration, cadence)\r\n      )\r\n        return alert('Inputs have to be positive numbers!');\r\n\r\n      workout = new Running([lat, lng], distance, duration, cadence);\r\n    }\r\n\r\n    // If workout cycling, create cycling object\r\n    if (type === 'cycling') {\r\n      const elevation = +inputElevation.value;\r\n\r\n      if (\r\n        !validInputs(distance, duration, elevation) ||\r\n        !allPositive(distance, duration)\r\n      )\r\n        return alert('Inputs have to be positive numbers!');\r\n\r\n      workout = new Cycling([lat, lng], distance, duration, elevation);\r\n    }\r\n\r\n    // Add new object to workout array\r\n    this.#workouts.push(workout);\r\n\r\n    // Render workout on map as marker\r\n    this._renderWorkoutMarker(workout);\r\n\r\n    // Render workout on list\r\n    this._renderWorkout(workout);\r\n\r\n    // Hide form + clear input fields\r\n    this._hideForm();\r\n\r\n    // Set local storage to all workouts\r\n    this._setLocalStorage();\r\n  }\r\n\r\n  _renderWorkoutMarker(workout) {\r\n    L.marker(workout.coords)\r\n      .addTo(this.#map)\r\n      .bindPopup(\r\n        L.popup({\r\n          maxWidth: 250,\r\n          minWidth: 100,\r\n          autoClose: false,\r\n          closeOnClick: false,\r\n          className: `${workout.type}-popup`,\r\n        })\r\n      )\r\n      .setPopupContent(\r\n        `${workout.type === 'running' ? 'üèÉ‚Äç‚ôÇÔ∏è' : 'üö¥‚Äç‚ôÄÔ∏è'} ${workout.description}`\r\n      )\r\n      .openPopup();\r\n  }\r\n\r\n  _renderWorkout(workout) {\r\n    let html = `\r\n      <li class=\"workout workout--${workout.type}\" data-id=\"${workout.id}\">\r\n        <h2 class=\"workout__title\">${workout.description}</h2>\r\n        <div class=\"workout__details\">\r\n          <span class=\"workout__icon\">${\r\n            workout.type === 'running' ? 'üèÉ‚Äç‚ôÇÔ∏è' : 'üö¥‚Äç‚ôÄÔ∏è'\r\n          }</span>\r\n          <span class=\"workout__value\">${workout.distance}</span>\r\n          <span class=\"workout__unit\">km</span>\r\n        </div>\r\n        <div class=\"workout__details\">\r\n          <span class=\"workout__icon\">‚è±</span>\r\n          <span class=\"workout__value\">${workout.duration}</span>\r\n          <span class=\"workout__unit\">min</span>\r\n        </div>\r\n    `;\r\n\r\n    if (workout.type === 'running')\r\n      html += `\r\n        <div class=\"workout__details\">\r\n          <span class=\"workout__icon\">‚ö°Ô∏è</span>\r\n          <span class=\"workout__value\">${workout.pace.toFixed(1)}</span>\r\n          <span class=\"workout__unit\">min/km</span>\r\n        </div>\r\n        <div class=\"workout__details\">\r\n          <span class=\"workout__icon\">ü¶∂üèº</span>\r\n          <span class=\"workout__value\">${workout.cadence}</span>\r\n          <span class=\"workout__unit\">spm</span>\r\n        </div>\r\n      </li>\r\n      `;\r\n\r\n    if (workout.type === 'cycling')\r\n      html += `\r\n        <div class=\"workout__details\">\r\n          <span class=\"workout__icon\">‚ö°Ô∏è</span>\r\n          <span class=\"workout__value\">${workout.speed.toFixed(1)}</span>\r\n          <span class=\"workout__unit\">km/h</span>\r\n        </div>\r\n        <div class=\"workout__details\">\r\n          <span class=\"workout__icon\">‚õ∞</span>\r\n          <span class=\"workout__value\">${workout.elevationGain}</span>\r\n          <span class=\"workout__unit\">m</span>\r\n        </div>\r\n      </li>\r\n      `;\r\n\r\n    form.insertAdjacentHTML('afterend', html);\r\n  }\r\n\r\n  _moveToPopup(e) {\r\n    // BUGFIX: When we click on a workout before the map has loaded, we get an error. But there is an easy fix:\r\n    if (!this.#map) return;\r\n\r\n    const workoutEl = e.target.closest('.workout');\r\n\r\n    if (!workoutEl) return;\r\n\r\n    const workout = this.#workouts.find(\r\n      work => work.id === workoutEl.dataset.id\r\n    );\r\n\r\n    this.#map.setView(workout.coords, this.#mapZoomLevel, {\r\n      animate: true,\r\n      pan: {\r\n        duration: 1,\r\n      },\r\n    });\r\n\r\n    // using the public interface\r\n    // workout.click();\r\n  }\r\n\r\n  _setLocalStorage() {\r\n    localStorage.setItem('workouts', JSON.stringify(this.#workouts));\r\n  }\r\n\r\n  _getLocalStorage() {\r\n    const data = JSON.parse(localStorage.getItem('workouts'));\r\n\r\n    if (!data) return;\r\n\r\n    this.#workouts = data;\r\n\r\n    this.#workouts.forEach(work => {\r\n      this._renderWorkout(work);\r\n    });\r\n  }\r\n\r\n  reset() {\r\n    localStorage.removeItem('workouts');\r\n    location.reload();\r\n  }\r\n}\r\n\r\nconst app = new App();\r\n\n\n//# sourceURL=webpack://test-project/./script.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./script.js"]();
/******/ 	
/******/ })()
;